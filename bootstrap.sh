#!/bin/bash


# Parse command line options.
USAGE=$(cat <<EOF
Usage: `basename $0` [-h] [-s]\n
  -h  help\n
  -s  skip git archive updates\n
EOF
)
while getopts hs OPT; do
    case "$OPT" in
        h)
            echo -e $USAGE
            exit 0
            ;;
        s)
            skip_git_update=1
            ;;
        \?)
            # getopts issues an error message
            echo -e $USAGE >&2
            exit 1
            ;;
    esac
done


# Ensure soloist installed
if ! which soloist >/dev/null 2>/dev/null; then
  # TODO: script this to work with/without ruby & rvm
  echo "install soloist"
  exit 1
fi


# $1 = repostiory owner on github
# $2 = archive name/directory
function update_git_archive () {
  mkdir -p cookbooks; cd cookbooks
  if [[ -d $2 ]]; then
    cd $2 && git pull && cd ..
  else
    git clone git@github.com:$1/$2.git
  fi
  cd ..
}


# Update git archives
if [ -z "$skip_git_update" ]; then
  update_git_archive webcoyote pivotal_workstation
  update_git_archive opscode-cookbooks dmg
  update_git_archive opscode-cookbooks yum
fi


# Build soloist file
cat > soloistrc << EOF
# This file generated by $0; do not edit directly
cookbook_paths:
- $PWD/cookbooks

recipes:
- yum::epel # Enterprise Linux
- yum::remi # for Firefox
- pivotal_workstation::wget
- pivotal_workstation::git
- pivotal_workstation::rvm
- pivotal_workstation::oh_my_zsh
- pivotal_workstation::zsh
- pivotal_workstation::workspace_directory
- pivotal_workstation::git_projects
- pivotal_workstation::sublime_text_pat
- pivotal_workstation::firefox

node_attributes:
  workspace_directory: dev

  git_projects:
    # put the dotfiles in the home directory
    - - .custom_dotfiles
      - git@github.com:webcoyote/my_dotfiles.git
      - .

    # Store my other projects in "~/dev" 
    - - network-traffic-visualize
      - git@github.com:webcoyote/network.git

EOF

# Build it
soloist
